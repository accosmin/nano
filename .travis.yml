sudo: required
dist: xenial
language: cpp

branches:
  only:
    - 0.4

matrix:
  include:
    - compiler: gcc
      env: COMPILER=g++-4.9 SOURCES=ubuntu-toolchain-r/test_nschloe/eigen-backports
    - compiler: gcc
      env: COMPILER=g++-5 SOURCES=ubuntu-toolchain-r/test_nschloe/eigen-backports
    - compiler: gcc
      env: COMPILER=g++-6 SOURCES=ubuntu-toolchain-r/test_nschloe/eigen-backports
    - compiler: clang
      env: COMPILER=clang-3.6 SOURCES=ubuntu-toolchain-r/test_nschloe/eigen-backports_llvm-toolchain-precise-3.6/main
    - compiler: clang
      env: COMPILER=clang-3.7 SOURCES=ubuntu-toolchain-r/test_nschloe/eigen-backports_llvm-toolchain-precise-3.7/main
    - compiler: clang
      env: COMPILER=clang-3.8 SOURCES=ubuntu-toolchain-r/test_nschloe/eigen-backports_llvm-toolchain-precise-3.8/main
    - os: osx
      osx_image: xcode7.3.1
      env: COMPILER=xcode7
    - os: osx
      osx_image: xcode8
      env: COMPILER=xcode8

install:
  - echo $TRAVIS_OS_NAME
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then brew update; brew install cmake ninja eigen devil libarchive; brew link libarchive --force; fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then for SOURCE in ${SOURCES//_/ }; do sudo add-apt-repository ppa:$SOURCE -y; done && sudo apt-get update -qq && sudo apt-get install -y $COMPILER cmake cmake-data ninja-build libdevil-dev libeigen3-dev libarchive-dev && export CXX="$COMPILER"; fi
  - mkdir build

before_script:
  - pwd

script:
  - time bash build.sh --build-type Release --generator ninja --float
  - ./build-release/apps/info --system
  - cd build-release/test && time ctest -j 3 -E "test_task_*"
  - cd ../../
  - ./build-release/apps/info --system
  - time bash build.sh --build-type Release --generator ninja --double
  - cd build-release/test && time ctest -j 3 -E "test_task_*"
